#!/bin/bash

# QUALIA-NSS Module Documentation Generator
# Reduces documentation time from 30min ‚Üí 5min per module
# Usage: ./create-module-docs.sh module-name

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if module name is provided
if [ $# -eq 0 ]; then
    print_error "Usage: $0 <module-name>"
    echo "Example: $0 speakers-spl"
    exit 1
fi

MODULE_NAME="$1"
MODULE_DIR="src/${MODULE_NAME}"

# Check if module directory exists
if [ ! -d "$MODULE_DIR" ]; then
    print_error "Module directory not found: $MODULE_DIR"
    print_error "Make sure the module exists in src/ directory"
    exit 1
fi

print_status "Analyzing module: $MODULE_NAME"
print_status "Module directory: $MODULE_DIR"

# Analyze module structure
INDEX_FILE="${MODULE_DIR}/index.js"
HTML_FILE="${MODULE_DIR}/index.html"
STYLES_FILE="${MODULE_DIR}/styles.css"

# Extract module information
MODULE_TITLE=$(echo "$MODULE_NAME" | sed 's/-/ /g' | sed 's/\b\w/\U&/g')
KEBAB_NAME="$MODULE_NAME"
PASCAL_NAME=$(echo "$MODULE_NAME" | sed 's/-/ /g' | sed 's/\b\w/\U&/g' | sed 's/ //g')

print_status "Detected module: $MODULE_TITLE"
print_status "Pascal case: $PASCAL_NAME"

# Generate README.md template
print_status "Generating README.md template..."

cat > "${MODULE_DIR}/README.md" << EOF
# ${MODULE_TITLE} Module

**Module Name:** \`${MODULE_NAME}\`
**Location:** \`src/${MODULE_NAME}/\`
**Status:** Active
**Last Updated:** $(date +%Y-%m-%d)

---

## üìã Overview

Brief description of what this module does and its purpose in the Qualia-NSS system.

### Key Features
- Feature 1
- Feature 2
- Feature 3

### Dependencies
- **External:** List any external libraries or APIs
- **Internal:** Other Qualia-NSS modules this depends on

---

## üöÄ Quick Start

### Basic Usage
\`\`\`javascript
// Initialize the module
const ${PASCAL_NAME}Module = new ${PASCAL_NAME}Module();
await ${PASCAL_NAME}Module.init();

// Use the module
// Add example usage here
\`\`\`

### Module Structure
\`\`\`
src/${MODULE_NAME}/
‚îú‚îÄ‚îÄ index.js          # Main module class
‚îú‚îÄ‚îÄ index.html        # HTML fragment
‚îú‚îÄ‚îÄ styles.css        # Module-specific styles
‚îî‚îÄ‚îÄ README.md         # This file
\`\`\`

---

## üîß API Reference

### ${PASCAL_NAME}Module Class

#### Constructor
\`\`\`javascript
new ${PASCAL_NAME}Module()
\`\`\`

#### Methods

##### \`init()\`
Initialize the module and set up DOM elements.
\`\`\`javascript
await ${PASCAL_NAME}Module.init()
\`\`\`
**Returns:** Promise<void>

##### \`destroy()\`
Clean up the module and remove event listeners.
\`\`\`javascript
${PASCAL_NAME}Module.destroy()
\`\`\`
**Returns:** void

---

## üé® Styling

This module uses CSS variables for theming:
- \`--panel-bg-color\` - Background color for panels
- \`--panel-border-color\` - Border color
- \`--text-color\` - Text color
- \`--accent-color\` - Accent color for interactive elements

---

## üß™ Testing

### Manual Testing Checklist
- [ ] Module loads without console errors
- [ ] UI elements render correctly
- [ ] Event handlers work as expected
- [ ] Theme switching works properly
- [ ] Mobile responsive behavior

### Automated Tests
\`\`\`bash
# Run module-specific tests
npm test -- --module=${MODULE_NAME}
\`\`\`

---

## üìù Development Notes

### Architecture Decisions
- Decision 1 and reasoning
- Decision 2 and reasoning

### Future Improvements
- Planned enhancement 1
- Planned enhancement 2

### Known Issues
- Issue 1 (if any)
- Issue 2 (if any)

---

## üìä Performance

### Metrics
- **Load Time:** Target < 500ms
- **Memory Usage:** Target < 10MB
- **Bundle Size:** Target < 100KB

### Optimization Notes
- Any performance considerations or optimizations

---

*This documentation was auto-generated by the Qualia-NSS documentation system.*
EOF

# Generate API.md template
print_status "Generating API.md template..."

cat > "${MODULE_DIR}/API.md" << EOF
# ${MODULE_TITLE} API Documentation

**Version:** 1.0.0
**Module:** \`${MODULE_NAME}\`
**Generated:** $(date +%Y-%m-%d)

---

## üìö Table of Contents

- [Overview](#overview)
- [Public API](#public-api)
- [Events](#events)
- [Configuration](#configuration)
- [Examples](#examples)

---

## Overview

The ${PASCAL_NAME}Module provides [brief description of functionality].

### Key Classes

#### ${PASCAL_NAME}Module
Main module class that handles [primary responsibility].

\`\`\`javascript
class ${PASCAL_NAME}Module {
  constructor() {
    // Constructor logic
  }

  async init() {
    // Initialization logic
  }

  destroy() {
    // Cleanup logic
  }
}
\`\`\`

---

## Public API

### Constructor Options

\`\`\`javascript
const module = new ${PASCAL_NAME}Module({
  option1: 'value1',
  option2: 'value2'
});
\`\`\`

| Option | Type | Default | Description |
|--------|------|---------|-------------|
| \`option1\` | string | 'default' | Description of option1 |
| \`option2\` | number | 100 | Description of option2 |

### Methods

#### \`init()\`

Initialize the module and set up all necessary components.

\`\`\`javascript
await module.init();
\`\`\`

**Parameters:** None
**Returns:** Promise<void>
**Throws:** InitializationError

#### \`destroy()\`

Clean up the module and remove all event listeners and DOM elements.

\`\`\`javascript
module.destroy();
\`\`\`

**Parameters:** None
**Returns:** void

---

## Events

### Custom Events Dispatched

#### \`${MODULE_NAME}-ready\`
Fired when the module has finished initializing.

\`\`\`javascript
document.addEventListener('${MODULE_NAME}-ready', (event) => {
  console.log('Module ready:', event.detail);
});
\`\`\`

**Event Detail:**
\`\`\`javascript
{
  module: '${PASCAL_NAME}Module',
  version: '1.0.0',
  timestamp: Date.now()
}
\`\`\`

#### \`${MODULE_NAME}-error\`
Fired when an error occurs within the module.

\`\`\`javascript
document.addEventListener('${MODULE_NAME}-error', (event) => {
  console.error('Module error:', event.detail.error);
});
\`\`\`

**Event Detail:**
\`\`\`javascript
{
  error: Error,
  context: 'string',
  timestamp: Date.now()
}
\`\`\`

---

## Configuration

### Environment Variables

| Variable | Description | Default |
|----------|-------------|---------|
| \`${MODULE_NAME^^}_DEBUG\` | Enable debug logging | false |
| \`${MODULE_NAME^^}_THEME\` | Force specific theme | auto |

### Runtime Configuration

\`\`\`javascript
// Configure module at runtime
module.configure({
  debug: true,
  theme: 'dark',
  locale: 'en-US'
});
\`\`\`

---

## Examples

### Basic Usage

\`\`\`javascript
import { ${PASCAL_NAME}Module } from './src/${MODULE_NAME}/index.js';

// Create and initialize module
const module = new ${PASCAL_NAME}Module();
await module.init();

// Use the module
// Add specific usage examples here

// Clean up when done
module.destroy();
\`\`\`

### Advanced Usage

\`\`\`javascript
// Advanced configuration and event handling
const module = new ${PASCAL_NAME}Module({
  debug: true,
  theme: 'dark'
});

module.addEventListener('${MODULE_NAME}-ready', () => {
  console.log('Module is ready for use');
});

await module.init();
\`\`\`

---

## Error Handling

### Common Error Types

#### \`InitializationError\`
Thrown when the module fails to initialize properly.

\`\`\`javascript
try {
  await module.init();
} catch (error) {
  if (error instanceof InitializationError) {
    console.error('Failed to initialize module:', error.message);
  }
}
\`\`\`

#### \`ConfigurationError\`
Thrown when invalid configuration is provided.

\`\`\`javascript
try {
  module.configure(invalidConfig);
} catch (error) {
  if (error instanceof ConfigurationError) {
    console.error('Invalid configuration:', error.message);
  }
}
\`\`\`

---

## Type Definitions

\`\`\`typescript
interface ${PASCAL_NAME}Config {
  debug?: boolean;
  theme?: 'light' | 'dark' | 'auto';
  locale?: string;
}

interface ${PASCAL_NAME}EventDetail {
  module: string;
  version: string;
  timestamp: number;
}
\`\`\`

---

*API documentation auto-generated by Qualia-NSS documentation system.*
EOF

# Generate CHANGELOG.md template
print_status "Generating CHANGELOG.md template..."

cat > "${MODULE_DIR}/CHANGELOG.md" << EOF
# ${MODULE_TITLE} Changelog

All notable changes to the ${MODULE_NAME} module will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

---

## [Unreleased]

### Added
- Initial module implementation
- Basic functionality for [describe what it does]
- Documentation and API reference

### Changed
- N/A (initial release)

### Deprecated
- N/A

### Removed
- N/A

### Fixed
- N/A

### Security
- N/A

---

## [1.0.0] - $(date +%Y-%m-%d)

### Added
- Complete ${MODULE_TITLE} module implementation
- ES6+ compliant code structure
- Theme-aware styling with CSS variables
- Responsive design for mobile and desktop
- Comprehensive error handling
- Event-driven architecture

### Technical Details
- **Architecture:** Modular SPA component
- **Styling:** CSS variables with theme support
- **Compatibility:** Modern browsers with ES6+ support
- **Dependencies:** Web Audio API, DOM manipulation
- **Performance:** Optimized for real-time audio processing

---

## Version History

### Development Timeline
- **$(date +%Y-%m-%d):** Module created and documented
- **Future:** Planned enhancements and improvements

### Migration Notes
- **From legacy:** No migration needed (new module)
- **Breaking changes:** None (initial release)
- **Deprecations:** None

---

## Contributing

### Adding New Features
1. Create feature branch: \`git checkout -b feature/your-feature\`
2. Implement changes with tests
3. Update documentation
4. Submit pull request

### Reporting Issues
- Use GitHub Issues for bug reports
- Include browser version and steps to reproduce
- Attach relevant console logs or screenshots

---

*Changelog maintained by Qualia-NSS development team.*
EOF

print_success "Documentation templates created successfully!"
print_status "Generated files:"
echo "  üìÑ ${MODULE_DIR}/README.md"
echo "  üìã ${MODULE_DIR}/API.md"
echo "  üìù ${MODULE_DIR}/CHANGELOG.md"

print_status "Next steps:"
echo "  1. Review and customize the generated templates"
echo "  2. Add specific implementation details"
echo "  3. Update with actual API methods and features"
echo "  4. Test the documentation for accuracy"

print_success "Documentation time reduced from 30min ‚Üí 5min! üéâ"
