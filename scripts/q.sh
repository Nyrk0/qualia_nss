#!/bin/bash

# QUALIA-NSS Development Shortcuts
# Quick command aliases for common development tasks
# Reduces repetitive typing and speeds up workflow

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to print colored output
print_status() {
    echo -e "${BLUE}[SHORTCUT]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Shortcut: Create new module with full structure
new_module() {
    local module_name="$1"

    if [ -z "$module_name" ]; then
        print_error "Usage: qnm <module-name>"
        print_status "Example: qnm audio-analyzer"
        return 1
    fi

    print_status "Creating new module: $module_name"

    # Create module directory structure
    mkdir -p "src/${module_name}"

    # Create basic files
    cat > "src/${module_name}/index.js" << EOF
/**
 * ${module_name} Module
 * Generated by Qualia-NSS development shortcuts
 */

class ${module_name^}Module {
  constructor() {
    this.initialized = false;
  }

  async init() {
    // TODO: Initialize module
    console.log('${module_name} module initialized');
    this.initialized = true;
  }

  destroy() {
    // TODO: Clean up module
    console.log('${module_name} module destroyed');
    this.initialized = false;
  }
}

// Export for module loader
window.${module_name^}Module = ${module_name^}Module;
EOF

    cat > "src/${module_name}/index.html" << EOF
<!-- ${module_name} Module HTML Fragment -->
<div id="${module_name}-container" class="module-container">
  <h3>${module_name^} Module</h3>
  <div id="${module_name}-content">
    <!-- Module content goes here -->
    <p>Module content loading...</p>
  </div>
</div>
EOF

    cat > "src/${module_name}/styles.css" << EOF
/* ${module_name} Module Styles */

#${module_name}-container {
  padding: 1rem;
  background: var(--panel-bg-color, #2a2a2a);
  border: 1px solid var(--panel-border-color, #444);
  border-radius: 8px;
}

#${module_name}-content {
  /* Module-specific styles */
}
EOF

    # Generate documentation
    if [ -f "scripts/create-module-docs.sh" ]; then
        print_status "Generating documentation..."
        ./scripts/create-module-docs.sh "$module_name"
    fi

    print_success "Module created: src/${module_name}/"
    print_status "Files created:"
    echo "  üìÑ src/${module_name}/index.js"
    echo "  üèóÔ∏è  src/${module_name}/index.html"
    echo "  üé® src/${module_name}/styles.css"
    echo "  üìö src/${module_name}/README.md (if docs script available)"
}

# Shortcut: Quick health check
qhc() {
    if [ -f "scripts/module-health-check.sh" ]; then
        ./scripts/module-health-check.sh "$@"
    else
        print_error "Health check script not found"
    fi
}

# Shortcut: Quick backup
qbk() {
    if [ -f "scripts/backup.sh" ]; then
        ./scripts/backup.sh quick "$@"
    else
        print_error "Backup script not found"
    fi
}

# Shortcut: Create documentation for existing module
qdoc() {
    local module_name="$1"

    if [ -z "$module_name" ]; then
        print_error "Usage: qdoc <module-name>"
        return 1
    fi

    if [ -f "scripts/create-module-docs.sh" ]; then
        ./scripts/create-module-docs.sh "$module_name"
    else
        print_error "Documentation script not found"
    fi
}

# Shortcut: Start development server
qserve() {
    local port="${1:-8080}"

    print_status "Starting development server on port $port"

    # Try different server options
    if command -v python3 &> /dev/null; then
        python3 -m http.server "$port"
    elif command -v python &> /dev/null; then
        python -m SimpleHTTPServer "$port"
    elif command -v npx &> /dev/null; then
        npx http-server -p "$port"
    else
        print_error "No suitable server found. Install Python or Node.js"
        return 1
    fi
}

# Shortcut: Open dashboard
qdash() {
    if [ -f "dashboard.html" ]; then
        print_status "Opening development dashboard..."
        if command -v open &> /dev/null; then
            open dashboard.html
        elif command -v xdg-open &> /dev/null; then
            xdg-open dashboard.html
        elif command -v start &> /dev/null; then
            start dashboard.html
        else
            print_warning "Could not auto-open dashboard"
            print_status "Open dashboard.html manually"
        fi
    else
        print_error "Dashboard not found. Run dashboard generation first."
    fi
}

# Shortcut: Check git status with health info
qstatus() {
    print_header "QUALIA-NSS STATUS"

    echo "üìä Git Status:"
    git status --short

    echo ""
    echo "üè• Module Health:"
    if [ -f "scripts/module-health-check.sh" ]; then
        ./scripts/module-health-check.sh --all 2>/dev/null | grep -E "(healthy|warning|error|total)" | head -5
    else
        echo "  Health check not available"
    fi

    echo ""
    echo "üì¶ Recent Commits:"
    git log --oneline -3

    echo ""
    echo "üéØ Quick Actions:"
    echo "  qnm <name>    - Create new module"
    echo "  qhc           - Health check all modules"
    echo "  qbk <file>    - Quick backup"
    echo "  qdoc <name>   - Generate docs for module"
    echo "  qserve        - Start dev server"
    echo "  qdash         - Open dashboard"
}

# Shortcut: Clean build artifacts
qclean() {
    print_status "Cleaning build artifacts..."

    # Remove common build artifacts
    find . -name "*.log" -type f -delete 2>/dev/null || true
    find . -name "*.tmp" -type f -delete 2>/dev/null || true
    find . -name ".DS_Store" -type f -delete 2>/dev/null || true
    find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true

    # Clean backup temp files (keep last 10)
    if [ -d "backups" ]; then
        find backups/ -name "*.tmp" -type f -delete 2>/dev/null || true
    fi

    print_success "Cleanup completed"
}

# Shortcut: Initialize development environment
qinit() {
    print_header "QUALIA-NSS DEV ENVIRONMENT"

    # Check for required tools
    echo "üîß Checking development tools:"

    if command -v node &> /dev/null; then
        echo "  ‚úÖ Node.js: $(node --version)"
    else
        echo "  ‚ùå Node.js: Not found"
    fi

    if command -v npm &> /dev/null; then
        echo "  ‚úÖ npm: $(npm --version)"
    else
        echo "  ‚ùå npm: Not found"
    fi

    if command -v git &> /dev/null; then
        echo "  ‚úÖ Git: $(git --version)"
    else
        echo "  ‚ùå Git: Not found"
    fi

    if command -v python3 &> /dev/null || command -v python &> /dev/null; then
        echo "  ‚úÖ Python: Available"
    else
        echo "  ‚ùå Python: Not found"
    fi

    echo ""
    echo "üìÅ Checking project structure:"
    if [ -d "src" ]; then echo "  ‚úÖ src/ directory"; else echo "  ‚ùå src/ directory"; fi
    if [ -d "scripts" ]; then echo "  ‚úÖ scripts/ directory"; else echo "  ‚ùå scripts/ directory"; fi
    if [ -f "index.html" ]; then echo "  ‚úÖ index.html"; else echo "  ‚ùå index.html"; fi
    if [ -f ".git/hooks/pre-commit" ]; then echo "  ‚úÖ Git hooks"; else echo "  ‚ùå Git hooks"; fi

    echo ""
    echo "üöÄ Quick start commands:"
    echo "  qstatus    - Check project status"
    echo "  qserve     - Start development server"
    echo "  qdash      - Open development dashboard"
    echo "  qnm <name> - Create new module"
}

# Main command handler
case "$1" in
    "new"|"nm")
        shift
        new_module "$@"
        ;;
    "health"|"hc")
        shift
        qhc "$@"
        ;;
    "backup"|"bk")
        shift
        qbk "$@"
        ;;
    "docs"|"doc")
        shift
        qdoc "$@"
        ;;
    "serve")
        shift
        qserve "$@"
        ;;
    "dash")
        qdash
        ;;
    "status")
        qstatus
        ;;
    "clean")
        qclean
        ;;
    "init")
        qinit
        ;;
    *)
        print_header "QUALIA-NSS DEVELOPMENT SHORTCUTS"
        echo "Usage: q <command> [options]"
        echo ""
        echo "Commands:"
        echo "  q nm|new <name>     Create new module with full structure"
        echo "  q hc|health [opts]  Run module health checks"
        echo "  q bk|backup <file>  Quick backup of file/directory"
        echo "  q doc|docs <name>   Generate documentation for module"
        echo "  q serve [port]      Start development server (default: 8080)"
        echo "  q dash              Open development dashboard"
        echo "  q status            Show project status overview"
        echo "  q clean             Clean build artifacts"
        echo "  q init              Check development environment"
        echo ""
        echo "Examples:"
        echo "  q new audio-effects    # Create new module"
        echo "  q health --all        # Check all modules"
        echo "  q backup src/         # Backup src directory"
        echo "  q docs my-module      # Generate docs"
        echo "  q serve 3000          # Start server on port 3000"
        echo ""
        echo "Tip: Add 'alias q=\"./scripts/q.sh\"' to your shell profile"
        exit 0
        ;;
esac
