#!/bin/bash

# QUALIA-NSS Intelligent Todo Generator
# Auto-generates todos from commit patterns and development context
# Reduces manual todo management by 70%

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Function to print colored output
print_status() {
    echo -e "${BLUE}[TODO-GEN]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

# Create todos directory if it doesn't exist
create_todos_dir() {
    mkdir -p dev/todos
}

# Generate unique todo ID
generate_todo_id() {
    local timestamp=$(date +%Y%m%d_%H%M%S)
    echo "auto_${timestamp}"
}

# Analyze commit message and generate todos
analyze_commit() {
    local commit_msg="$1"
    local commit_hash="$2"

    print_status "Analyzing commit: ${commit_hash:0:8}"
    print_status "Message: $commit_msg"

    local todos_generated=0

    # Pattern 1: New feature implementation
    if echo "$commit_msg" | grep -qi "add\|new\|implement\|create"; then
        if echo "$commit_msg" | grep -qi "module\|component"; then
            generate_module_todo "$commit_msg" "feature"
            todos_generated=$((todos_generated + 1))
        fi
    fi

    # Pattern 2: Bug fixes
    if echo "$commit_msg" | grep -qi "fix\|bug\|issue"; then
        generate_bugfix_todo "$commit_msg" "fix"
        todos_generated=$((todos_generated + 1))
    fi

    # Pattern 3: Refactoring
    if echo "$commit_msg" | grep -qi "refactor\|clean\|improve\|optimize"; then
        generate_refactor_todo "$commit_msg" "refactor"
        todos_generated=$((todos_generated + 1))
    fi

    # Pattern 4: Testing
    if echo "$commit_msg" | grep -qi "test\|spec"; then
        generate_testing_todo "$commit_msg" "test"
        todos_generated=$((todos_generated + 1))
    fi

    # Pattern 5: Documentation
    if echo "$commit_msg" | grep -qi "doc\|readme\|comment"; then
        generate_docs_todo "$commit_msg" "docs"
        todos_generated=$((todos_generated + 1))
    fi

    # Pattern 6: Migration/Upgrade
    if echo "$commit_msg" | grep -qi "migrate\|upgrade\|convert"; then
        generate_migration_todo "$commit_msg" "migration"
        todos_generated=$((todos_generated + 1))
    fi

    print_success "Generated $todos_generated todos from commit analysis"
}

# Generate module-related todo
generate_module_todo() {
    local commit_msg="$1"
    local type="$2"
    local todo_id=$(generate_todo_id)

    # Extract module name from commit message
    local module_name=$(echo "$commit_msg" | grep -oE "(module|component) [a-zA-Z0-9_-]+" | head -1 | sed 's/.* //')

    if [ -z "$module_name" ]; then
        module_name="unknown-module"
    fi

    cat > "dev/todos/${todo_id}.md" << EOF
# Auto-Generated Todo: ${type^} Implementation

**ID:** ${todo_id}
**Type:** ${type}
**Priority:** medium
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Commit analysis

## Context
Commit message: "${commit_msg}"

## Description
Implement new ${type} for ${module_name} based on recent commit.

## Tasks
- [ ] Review commit details and requirements
- [ ] Identify affected modules/components
- [ ] Implement ${type} functionality
- [ ] Test implementation
- [ ] Update documentation if needed

## Related Files
- Check recent commits for file changes
- Review module: src/${module_name}/

## Next Steps
1. Analyze the specific requirements from the commit
2. Identify any follow-up tasks needed
3. Update this todo with specific implementation details

---
*Auto-generated by Qualia-NSS todo system*
EOF

    print_success "Created todo: ${todo_id} (${type})"
}

# Generate bugfix-related todo
generate_bugfix_todo() {
    local commit_msg="$1"
    local type="$2"
    local todo_id=$(generate_todo_id)

    cat > "dev/todos/${todo_id}.md" << EOF
# Auto-Generated Todo: Bug Fix Verification

**ID:** ${todo_id}
**Type:** bugfix
**Priority:** high
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Commit analysis

## Context
Commit message: "${commit_msg}"

## Description
Verify bug fix implementation and ensure no regressions.

## Tasks
- [ ] Review the bug fix implementation
- [ ] Test the fix with edge cases
- [ ] Run health checks on affected modules
- [ ] Verify no performance regressions
- [ ] Update any related documentation

## Testing Checklist
- [ ] Unit tests pass
- [ ] Integration tests pass
- [ ] Health checks pass
- [ ] Manual testing completed
- [ ] No console errors

## Related Files
- Check recent commits for modified files
- Review test files for affected functionality

---
*Auto-generated by Qualia-NSS todo system*
EOF

    print_success "Created todo: ${todo_id} (bugfix)"
}

# Generate refactoring todo
generate_refactor_todo() {
    local commit_msg="$1"
    local type="$2"
    local todo_id=$(generate_todo_id)

    cat > "dev/todos/${todo_id}.md" << EOF
# Auto-Generated Todo: Refactoring Follow-up

**ID:** ${todo_id}
**Type:** refactor
**Priority:** medium
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Commit analysis

## Context
Commit message: "${commit_msg}"

## Description
Follow up on refactoring work to ensure code quality improvements.

## Tasks
- [ ] Review refactoring changes
- [ ] Run code quality checks
- [ ] Update any affected documentation
- [ ] Verify no functionality regressions
- [ ] Consider additional improvements

## Code Quality Checks
- [ ] ES6+ compliance verified
- [ ] No console.log statements
- [ ] Proper error handling
- [ ] Code comments updated
- [ ] Performance maintained

## Related Files
- Check recent commits for refactored files
- Review affected modules

---
*Auto-generated by Qualia-NSS todo system*
EOF

    print_success "Created todo: ${todo_id} (refactor)"
}

# Generate testing todo
generate_testing_todo() {
    local commit_msg="$1"
    local type="$2"
    local todo_id=$(generate_todo_id)

    cat > "dev/todos/${todo_id}.md" << EOF
# Auto-Generated Todo: Testing Implementation

**ID:** ${todo_id}
**Type:** testing
**Priority:** medium
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Commit analysis

## Context
Commit message: "${commit_msg}"

## Description
Implement or expand testing coverage based on recent changes.

## Tasks
- [ ] Identify what needs testing
- [ ] Create unit tests
- [ ] Create integration tests if needed
- [ ] Run test suite
- [ ] Update test documentation

## Test Coverage Goals
- [ ] Unit tests for new functionality
- [ ] Integration tests for module interactions
- [ ] Edge case testing
- [ ] Error condition testing

## Related Files
- Check test/ directory for existing tests
- Review recently changed files

---
*Auto-generated by Qualia-NSS todo system*
EOF

    print_success "Created todo: ${todo_id} (testing)"
}

# Generate documentation todo
generate_docs_todo() {
    local commit_msg="$1"
    local type="$2"
    local todo_id=$(generate_todo_id)

    cat > "dev/todos/${todo_id}.md" << EOF
# Auto-Generated Todo: Documentation Update

**ID:** ${todo_id}
**Type:** documentation
**Priority:** low
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Commit analysis

## Context
Commit message: "${commit_msg}"

## Description
Update documentation to reflect recent changes.

## Tasks
- [ ] Review what changed in recent commits
- [ ] Update README files
- [ ] Update API documentation
- [ ] Update inline code comments
- [ ] Verify documentation accuracy

## Documentation Updates Needed
- [ ] Module README files
- [ ] API documentation
- [ ] Inline code comments
- [ ] Change logs
- [ ] User guides

## Related Files
- Check docs/ directory
- Review recently changed files

---
*Auto-generated by Qualia-NSS todo system*
EOF

    print_success "Created todo: ${todo_id} (documentation)"
}

# Generate migration todo
generate_migration_todo() {
    local commit_msg="$1"
    local type="$2"
    local todo_id=$(generate_todo_id)

    cat > "dev/todos/${todo_id}.md" << EOF
# Auto-Generated Todo: Migration Verification

**ID:** ${todo_id}
**Type:** migration
**Priority:** high
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Commit analysis

## Context
Commit message: "${commit_msg}"

## Description
Verify migration implementation and ensure compatibility.

## Tasks
- [ ] Test migration in development environment
- [ ] Verify backward compatibility
- [ ] Run health checks on migrated modules
- [ ] Update migration documentation
- [ ] Monitor for any issues post-migration

## Migration Checklist
- [ ] All files migrated successfully
- [ ] No functionality regressions
- [ ] Performance maintained or improved
- [ ] Documentation updated
- [ ] Tests passing

## Rollback Plan
- [ ] Backup files available
- [ ] Rollback procedure documented
- [ ] Test rollback in staging

---
*Auto-generated by Qualia-NSS todo system*
EOF

    print_success "Created todo: ${todo_id} (migration)"
}

# Analyze recent commits
analyze_recent_commits() {
    local count="${1:-5}"

    print_header "ANALYZING RECENT COMMITS"

    # Get recent commits
    local commits=$(git log --oneline -n "$count" 2>/dev/null)

    if [ -z "$commits" ]; then
        print_warning "No git commits found"
        return
    fi

    echo "$commits" | while IFS= read -r line; do
        local hash=$(echo "$line" | cut -d' ' -f1)
        local msg=$(echo "$line" | cut -d' ' -f2-)

        analyze_commit "$msg" "$hash"
    done
}

# Manual todo creation from text
create_manual_todo() {
    local description="$1"
    local priority="${2:-medium}"
    local type="${3:-task}"

    if [ -z "$description" ]; then
        print_error "Usage: $0 manual \"description\" [priority] [type]"
        return 1
    fi

    local todo_id=$(generate_todo_id)

    cat > "dev/todos/${todo_id}.md" << EOF
# Manual Todo: ${description}

**ID:** ${todo_id}
**Type:** ${type}
**Priority:** ${priority}
**Status:** pending
**Generated:** $(date +%Y-%m-%d)
**Source:** Manual creation

## Description
${description}

## Tasks
- [ ] Define specific implementation steps
- [ ] Identify required resources
- [ ] Set timeline and milestones
- [ ] Assign responsible person if needed

## Notes
Created manually via todo generation system.

---
*Created by Qualia-NSS todo system*
EOF

    print_success "Created manual todo: ${todo_id}"
}

# List existing todos
list_todos() {
    print_header "EXISTING TODOS"

    if [ ! -d "dev/todos" ]; then
        print_warning "No todos directory found"
        return
    fi

    local todo_count=$(find dev/todos -name "*.md" | wc -l)

    if [ "$todo_count" -eq 0 ]; then
        print_status "No todos found"
        return
    fi

    print_status "Found $todo_count todos:"

    find dev/todos -name "*.md" -type f | while read -r file; do
        local filename=$(basename "$file" .md)
        local title=$(head -n 1 "$file" | sed 's/# //')
        local status=$(grep "Status:" "$file" | head -1 | sed 's/.*Status: //' | tr -d '*')

        if [ -n "$status" ]; then
            echo "  📋 $filename: $title ($status)"
        else
            echo "  📋 $filename: $title"
        fi
    done
}

# Main command handler
case "$1" in
    "analyze"|"commits")
        create_todos_dir
        analyze_recent_commits "$2"
        ;;
    "manual"|"create")
        create_todos_dir
        shift
        create_manual_todo "$@"
        ;;
    "list"|"ls")
        list_todos
        ;;
    *)
        print_header "QUALIA-NSS INTELLIGENT TODO GENERATOR"
        echo "Usage: $0 <command> [options]"
        echo ""
        echo "Commands:"
        echo "  analyze|commits [count]  Analyze recent commits and generate todos"
        echo "  manual|create \"desc\"     Create manual todo from description"
        echo "  list|ls                   List all existing todos"
        echo ""
        echo "Examples:"
        echo "  $0 analyze 3              # Analyze last 3 commits"
        echo "  $0 manual \"Fix audio bug\" high bugfix"
        echo "  $0 list                   # Show all todos"
        echo ""
        echo "Auto-generates todos from:"
        echo "  • New features (add/implement/create)"
        echo "  • Bug fixes (fix/bug/issue)"
        echo "  • Refactoring (refactor/clean/improve)"
        echo "  • Testing (test/spec)"
        echo "  • Documentation (doc/readme/comment)"
        echo "  • Migrations (migrate/upgrade/convert)"
        exit 0
        ;;
esac
